/**
 * ü§ñ AI CHAT ADVISOR - Volume Profile Expert System
 * Especialista en metodolog√≠a Dale Woods + Setup EMAs personalizado
 */

class AIChatAdvisor {
    constructor() {
        // üîë API Key configurada por el usuario
        this.apiKey = this.getAPIKey();
        
        // ü§ñ MODELO √öNICO - Llama Vision para TODO (texto + im√°genes)
        this.model = 'meta-llama/llama-3.2-11b-vision-instruct:free';
        
        // Estado de conversaci√≥n mejorado
        this.conversationContext = {
            hasAnalyzedImage: false,
            lastImageAnalysis: null,
            isFollowUp: false,
            conversationHistory: [],
            lastAnalysisData: null
        };
        
        this.baseURL = 'https://openrouter.ai/api/v1/chat/completions';
        this.currentTicker = 'XAUUSD';
        this.isThinking = false;
        
        // Managers
        this.storageManager = null;
        this.imageHandler = null;
        
        // UI Elements
        this.chatContainer = null;
        this.chatMessages = null;
        this.messageInput = null;
        this.sendButton = null;
        this.uploadButton = null;
        
        // Estado actual del mercado
        this.currentMarketContext = null;
        
        console.log('ü§ñ Volume Profile AI Expert inicializado');
    }
    
    // üß† OBTENER CONTEXTO DETALLADO DEL AN√ÅLISIS
    getDetailedAnalysisContext() {
        if (!this.currentMarketContext) {
            return 'No hay datos de an√°lisis t√©cnico disponibles.';
        }

        const analysis = this.currentMarketContext;
        let detailedContext = '';

        // OANDA Data
        if (analysis.oanda) {
            detailedContext += `\nOANDA DATOS EN TIEMPO REAL:\n`;
            detailedContext += `‚Ä¢ Precio Bid: ${analysis.oanda.price?.bid || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Precio Ask: ${analysis.oanda.price?.ask || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Precio Mid: ${analysis.oanda.price?.mid || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Spread: ${analysis.oanda.price?.spread || 'N/A'} pips\n`;
            detailedContext += `‚Ä¢ Volumen: ${analysis.oanda.price?.volume ? analysis.oanda.price.volume.toLocaleString() : 'N/A'}\n`;
            detailedContext += `‚Ä¢ Timestamp: ${new Date(analysis.oanda.price?.time || '').toLocaleString()}\n`;
        }

        // Investing.com Data
        if (analysis.investing) {
            detailedContext += `\nINVESTING.COM AN√ÅLISIS T√âCNICO:\n`;
            detailedContext += `‚Ä¢ Estado de datos: ${analysis.investing.isReal ? 'DATOS REALES' : 'SIMULADO'}\n`;
            
            if (analysis.investing.movingAverages) {
                detailedContext += `‚Ä¢ Medias M√≥viles Summary: ${analysis.investing.movingAverages.summary}\n`;
                detailedContext += `‚Ä¢ Medias M√≥viles Se√±al: ${analysis.investing.movingAverages.signal}\n`;
                if (analysis.investing.movingAverages.details) {
                    detailedContext += `‚Ä¢ Detalles MAs: ${JSON.stringify(analysis.investing.movingAverages.details)}\n`;
                }
            }
            
            if (analysis.investing.oscillators) {
                detailedContext += `‚Ä¢ Osciladores Summary: ${analysis.investing.oscillators.summary}\n`;
                detailedContext += `‚Ä¢ Osciladores Se√±al: ${analysis.investing.oscillators.signal}\n`;
                if (analysis.investing.oscillators.details) {
                    detailedContext += `‚Ä¢ Detalles Osciladores: ${JSON.stringify(analysis.investing.oscillators.details)}\n`;
                }
            }
        }

        // Order Flow Data
        if (analysis.orderFlow) {
            detailedContext += `\nORDER FLOW AN√ÅLISIS:\n`;
            detailedContext += `‚Ä¢ Nivel de Liquidez: ${analysis.orderFlow.liquidity?.level || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Score de Liquidez: ${analysis.orderFlow.liquidity?.score || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Predicci√≥n Direcci√≥n: ${analysis.orderFlow.prediction?.direction || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Probabilidad: ${analysis.orderFlow.prediction?.probability || 0}%\n`;
            detailedContext += `‚Ä¢ Confianza: ${analysis.orderFlow.prediction?.confidence || 'N/A'}\n`;
            if (analysis.orderFlow.levels) {
                detailedContext += `‚Ä¢ Niveles Clave: ${JSON.stringify(analysis.orderFlow.levels)}\n`;
            }
        }

        // Trade Recommendation
        if (analysis.tradeRecommendation) {
            detailedContext += `\nRECOMENDACI√ìN DE TRADE:\n`;
            detailedContext += `‚Ä¢ Acci√≥n Recomendada: ${analysis.tradeRecommendation.action || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Confianza: ${analysis.tradeRecommendation.confidence || 0}%\n`;
            detailedContext += `‚Ä¢ Raz√≥n: ${analysis.tradeRecommendation.reason || 'N/A'}\n`;
            if (analysis.tradeRecommendation.entryPrice) {
                detailedContext += `‚Ä¢ Precio Entrada: ${analysis.tradeRecommendation.entryPrice}\n`;
            }
            if (analysis.tradeRecommendation.stopLoss) {
                detailedContext += `‚Ä¢ Stop Loss: ${analysis.tradeRecommendation.stopLoss}\n`;
            }
            if (analysis.tradeRecommendation.takeProfit) {
                detailedContext += `‚Ä¢ Take Profit: ${analysis.tradeRecommendation.takeProfit}\n`;
            }
        }

        // Verdict Final
        if (analysis.verdict) {
            detailedContext += `\nVEREDICTO FINAL DEL SISTEMA:\n`;
            detailedContext += `‚Ä¢ Direcci√≥n: ${analysis.verdict.direction || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Confianza: ${analysis.verdict.confidence || 0}%\n`;
            detailedContext += `‚Ä¢ Recomendaci√≥n: ${analysis.verdict.recommendation || 'N/A'}\n`;
            detailedContext += `‚Ä¢ Timestamp: ${new Date(analysis.verdict.timestamp || analysis.timestamp).toLocaleString()}\n`;
        }

        // News Analysis
        if (analysis.news) {
            detailedContext += `\nAN√ÅLISIS DE NOTICIAS:\n`;
            detailedContext += `‚Ä¢ Estado: ${analysis.news.isReal ? 'NOTICIAS REALES' : 'SIMULADO'}\n`;
            if (analysis.news.decisionImpact) {
                detailedContext += `‚Ä¢ Impacto en Decisi√≥n: ${analysis.news.decisionImpact.percentage}% (${analysis.news.decisionImpact.level})\n`;
                if (analysis.news.decisionImpact.breakdown) {
                    detailedContext += `‚Ä¢ Breakdown: Cr√≠ticas=${analysis.news.decisionImpact.breakdown.critical}, Altas=${analysis.news.decisionImpact.breakdown.high}, Total=${analysis.news.decisionImpact.breakdown.total}\n`;
                }
            }
            if (analysis.news.marketImpact) {
                detailedContext += `‚Ä¢ Impacto Mercado: ${analysis.news.marketImpact.level} - ${analysis.news.marketImpact.description}\n`;
            }
            if (analysis.news.warnings && analysis.news.warnings.length > 0) {
                detailedContext += `‚Ä¢ Alertas Cr√≠ticas: ${analysis.news.warnings.length} detectadas\n`;
                analysis.news.warnings.forEach((warning, index) => {
                    detailedContext += `  ${index + 1}. ${warning.message}\n`;
                });
            } else {
                detailedContext += `‚Ä¢ Alertas Cr√≠ticas: Ninguna detectada\n`;
            }
            if (analysis.news.recentNews && analysis.news.recentNews.length > 0) {
                detailedContext += `‚Ä¢ Noticias Recientes: ${analysis.news.recentNews.length} noticias\n`;
                analysis.news.recentNews.slice(0, 3).forEach((news, index) => {
                    detailedContext += `  ${index + 1}. [${news.impact}] ${news.title} (${news.time})\n`;
                });
            }
        }

        return detailedContext || 'An√°lisis t√©cnico en proceso...';
    }
    
    // üîë OBTENER API KEY
    getAPIKey() {
        const savedKey = localStorage.getItem('openrouter_api_key');
        if (savedKey) {
            console.log('üîë API Key encontrada');
            return savedKey;
        }
        console.warn('‚ö†Ô∏è No se encontr√≥ API Key de OpenRouter');
        return null;
    }
    
    // üîß CONFIGURAR API KEY
    configureAPIKey() {
        const currentKey = localStorage.getItem('openrouter_api_key');
        const message = currentKey ? 
            `API Key actual: ${currentKey.substring(0, 10)}...\n\n¬øQuieres cambiarla?` :
            'Configura tu API Key de OpenRouter\n\nObt√©n una gratis en: https://openrouter.ai';
        
        const newKey = prompt(message + '\n\nIngresa tu API Key:', currentKey || '');
        
        if (newKey && newKey.trim()) {
            localStorage.setItem('openrouter_api_key', newKey.trim());
            this.apiKey = newKey.trim();
            this.showNotification('API Key configurada', 'success');
            return true;
        } else if (newKey === '') {
            localStorage.removeItem('openrouter_api_key');
            this.apiKey = null;
            this.showNotification('API Key eliminada', 'info');
        }
        return false;
    }

    // üîß INICIALIZACI√ìN
    async initialize() {
        try {
            console.log('üîß Inicializando Volume Profile Expert...');
            
            if (typeof ChatStorageManager !== 'undefined') {
                this.storageManager = new ChatStorageManager();
            } else {
                console.error('‚ùå ChatStorageManager no disponible');
                return false;
            }
            
            if (typeof ImageUploadHandler !== 'undefined') {
                this.imageHandler = new ImageUploadHandler();
            } else {
                console.error('‚ùå ImageUploadHandler no disponible');
                return false;
            }
            
            this.createChatUI();
            this.setupEventListeners();
            this.loadChatHistory(this.currentTicker);
            
            console.log('‚úÖ Volume Profile Expert listo');
            return true;
            
        } catch (error) {
            console.error('‚ùå Error inicializando:', error);
            return false;
        }
    }

    // üé® CONECTAR CON UI EXISTENTE
    createChatUI() {
        this.chatContainer = document.getElementById('chatPanel');
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('chatInput');
        this.sendButton = document.getElementById('sendBtn');
        this.uploadButton = document.getElementById('imageBtn');
        
        if (!this.chatContainer || !this.chatMessages || !this.messageInput || !this.sendButton) {
            console.error('‚ùå Elementos del chat no encontrados');
            return false;
        }
        
        const welcomeTicker = document.querySelector('.ticker-highlight');
        if (welcomeTicker) {
            welcomeTicker.textContent = this.currentTicker;
        }
        
        console.log('üé® Conectado con UI existente');
        return true;
    }

    // üéß CONFIGURAR EVENT LISTENERS
    setupEventListeners() {
        this.sendButton?.addEventListener('click', () => {
            this.sendMessage();
        });

        this.messageInput?.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        this.uploadButton?.addEventListener('click', () => {
            document.getElementById('imageInput')?.click();
        });

        document.getElementById('imageInput')?.addEventListener('change', (e) => {
            this.handleImageUpload(e);
        });

        this.messageInput?.addEventListener('input', (e) => {
            this.autoResizeTextarea(e.target);
        });
        
        this.messageInput?.addEventListener('paste', (e) => {
            this.handlePasteImages(e);
        });

        console.log('üéß Event listeners configurados');
    }

    // üì∏ MANEJO DE IM√ÅGENES
    async handleImageUpload(event) {
        const files = Array.from(event.target.files);
        if (files.length === 0) return;

        try {
            await this.processAndDisplayImages(files);
        } catch (error) {
            console.error('‚ùå Error subiendo im√°genes:', error);
            this.showNotification('Error subiendo im√°genes', 'error');
        }
        event.target.value = '';
    }
    
    async handlePasteImages(event) {
        const items = event.clipboardData?.items;
        if (!items) return;
        
        const imageFiles = [];
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (item.type.startsWith('image/')) {
                event.preventDefault();
                const file = item.getAsFile();
                if (file) imageFiles.push(file);
            }
        }
        
        if (imageFiles.length > 0) {
            this.showNotification(`üì∑ ${imageFiles.length} imagen(es) pegada(s)`, 'success');
            await this.processAndDisplayImages(imageFiles);
        }
    }
    
    async processAndDisplayImages(files) {
        if (!this.imageHandler) {
            this.showNotification('Image handler no disponible', 'error');
            return;
        }
        
        const previewContainer = document.getElementById('imagePreviewContainer');
        if (!previewContainer) {
            this.showNotification('Contenedor no encontrado', 'error');
            return;
        }
        
        try {
            const results = await this.imageHandler.processMultipleFiles(files);
            
            for (const result of results) {
                if (result.success) {
                    this.imageHandler.createImagePreview(result.data, previewContainer);
                } else {
                    console.error(`Error procesando ${result.filename}:`, result.error);
                    this.showNotification(`Error: ${result.error}`, 'error');
                }
            }
            
            if (previewContainer.children.length > 0) {
                previewContainer.style.display = 'flex';
            }
            
            const successCount = results.filter(r => r.success).length;
            if (successCount > 0) {
                this.showNotification(`‚úÖ ${successCount} imagen(es) lista(s)`, 'success');
            }
            
        } catch (error) {
            console.error('‚ùå Error procesando im√°genes:', error);
            this.showNotification('Error procesando im√°genes', 'error');
        }
    }

    hasUploadedImages() {
        return document.querySelectorAll('#imagePreviewContainer .image-preview').length > 0;
    }

    getUploadedImages() {
        const images = [];
        document.querySelectorAll('#imagePreviewContainer .image-preview img').forEach(img => {
            images.push(img.src);
        });
        return images;
    }

    clearUploadedImages() {
        const previewContainer = document.getElementById('imagePreviewContainer');
        if (previewContainer) {
            previewContainer.innerHTML = '';
            previewContainer.style.display = 'none';
        }
    }

    // üì® ENVIAR MENSAJE
    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message && !this.hasUploadedImages()) {
            this.showNotification('Escribe un mensaje o sube una imagen', 'warning');
            return;
        }

        if (!this.apiKey) {
            const configured = this.configureAPIKey();
            if (!configured) {
                this.showNotification('Necesitas configurar tu API Key', 'warning');
                return;
            }
        }

        if (this.isThinking) {
            this.showNotification('La IA est√° procesando...', 'info');
            return;
        }

        try {
            this.addUserMessage(message);
            this.messageInput.value = '';
            this.autoResizeTextarea(this.messageInput);
            
            const fullContext = this.prepareContextForAI(message);
            this.showThinkingIndicator();
            
            const response = await this.callOpenRouterAPI(fullContext);
            this.hideThinkingIndicator();
            
            this.addAIMessage(response);
            this.saveChatToStorage();
            
            // Solo limpiar im√°genes si no es follow-up
            if (!this.conversationContext.isFollowUp) {
                this.clearUploadedImages();
            }
            
        } catch (error) {
            console.error('‚ùå Error enviando mensaje:', error);
            this.hideThinkingIndicator();
            
            let errorMessage = '‚ùå **Error de conexi√≥n**\n\n';
            
            if (error.message.includes('401')) {
                errorMessage += 'API Key inv√°lida. ¬øConfigurar nueva?';
                this.addAIMessage(errorMessage);
                setTimeout(() => {
                    if (confirm('API Key inv√°lida. ¬øConfigurar nueva?')) {
                        this.configureAPIKey();
                    }
                }, 1000);
            } else {
                errorMessage += 'Error de conexi√≥n. Verifica internet e intenta nuevamente.';
                this.addAIMessage(errorMessage);
            }
            
            this.showNotification('Error al enviar mensaje', 'error');
        }
    }

    // ü§ñ CONTEXTO DE CONVERSACI√ìN MEJORADO
    updateConversationContext(hasImages, userMessage) {
        // Detectar si es follow-up conversacional
        const followUpIndicators = [
            'que opinas', 'tu qu√©', 'entonces', 'y ahora', 'confirmalo', 'confirma',
            'es asi', 'correcto', 'verdad', 'direcci√≥n', 'hacia donde', 'para donde',
            'tu opinion', 'tu piensas', 'crees que', 'el precio', 'POC', 'hacia donde',
            'subir', 'bajar', 'alcista', 'bajista', 'en este momento'
        ];
        
        this.conversationContext.isFollowUp = followUpIndicators.some(indicator => 
            userMessage.toLowerCase().includes(indicator)
        );
        
        if (hasImages) {
            this.conversationContext.hasAnalyzedImage = true;
            this.conversationContext.lastImageAnalysis = new Date().toISOString();
        }
        
        // Mantener historial de an√°lisis
        this.conversationContext.lastAnalysisData = this.currentMarketContext;
        
        console.log('üñºÔ∏è Solo Llama Vision:', this.model);
        console.log('üí¨ Es follow-up?', this.conversationContext.isFollowUp);
        console.log('üìä Tiene datos previos?', !!this.conversationContext.lastAnalysisData);
    }
    
    // üîç PREPARAR CONTEXTO PARA LA IA - VOLUME PROFILE EXPERT
    prepareContextForAI(userMessage) {
        const marketContext = this.getCurrentMarketContext();
        const chatHistory = this.getChatHistory();
        const images = this.getUploadedImages();
        
        // Solo Llama Vision - no cambiar modelo
        this.updateConversationContext(images.length > 0, userMessage);
        
        // Determinar el tono de respuesta basado en el contexto
        const isFollowUpQuestion = this.conversationContext.isFollowUp;
        const hasRecentAnalysis = this.conversationContext.hasAnalyzedImage;
        
        let systemPrompt;
        
        if (isFollowUpQuestion && hasRecentAnalysis) {
            // MODO CONVERSACIONAL - Para follow-ups
            systemPrompt = `Eres un trader experto en Volume Profile muy conversacional y directo. El usuario ya te mostr√≥ un gr√°fico y ahora te hace una pregunta de seguimiento.

üìä DATOS COMPLETOS DEL AN√ÅLISIS ACTUAL (${this.currentTicker}):
${marketContext}

üß† **INFORMACI√ìN T√âCNICA DISPONIBLE:**
${this.getDetailedAnalysisContext()}

üí¨ **MODO CONVERSATIONAL ACTIVO**
- NO hagas un an√°lisis completo nuevo
- USA los datos del an√°lisis t√©cnico que tienes arriba
- Responde directamente a la pregunta espec√≠fica
- S√© conversacional y humano como si fueras un colega trader
- Usa el an√°lisis previo de la imagen que ya viste
- Mant√©n respuestas concisas y al grano
- Puedes usar emojis ocasionales para ser m√°s humano

üéØ **RESPONDE COMO TRADER EXPERIMENTADO:**
- "Mira, seg√∫n los datos que tengo..."
- "Bas√°ndome en el an√°lisis actual..."
- "Te soy honesto, los indicadores muestran..."
- "Por lo que veo en el gr√°fico y los datos..."
- "Mi opini√≥n considerando todo es que..."

‚ö° **REGLAS FOLLOW-UP:**
- M√°ximo 3-4 l√≠neas de respuesta
- Ve directo al punto
- Confirma o niega con evidencia breve del an√°lisis
- Mant√©n el contexto de la imagen analizada previamente
- SIEMPRE referencia los datos t√©cnicos disponibles`;
        } else {
            // MODO AN√ÅLISIS COMPLETO - Para nuevas im√°genes o an√°lisis profundo
            systemPrompt = `Eres un EXPERTO MUNDIAL en VOLUME PROFILE con 15+ a√±os especializ√°ndote en la metodolog√≠a exacta de Dale Woods. Combinas este expertise con el setup personalizado del trader.

üìä DATOS COMPLETOS DEL AN√ÅLISIS ACTUAL (${this.currentTicker}):
${marketContext}

üß† **INFORMACI√ìN T√âCNICA DISPONIBLE:**
${this.getDetailedAnalysisContext()}

üéØ **SETUP PERSONALIZADO DEL TRADER:**
‚Ä¢ **EMA 200 (L√çNEA ROJA)**: Tendencia principal - Filtro direccional
‚Ä¢ **EMA 55 (L√çNEA AZUL)**: Tendencia intermedia - Confirmaci√≥n momentum
‚Ä¢ **EMA 21 (L√çNEA AMARILLA)**: Tendencia corta - Timing entrada

üìà **VOLUME PROFILE MASTERY:**

**Los 4 Tipos de Perfiles:**
‚Ä¢ **D-Profile**: Mercado balanceado, instituciones acumulando posiciones
‚Ä¢ **P-Profile**: Compradores agresivos dominan, vendedores d√©biles (bullish)
‚Ä¢ **b-Profile**: Vendedores agresivos dominan, compradores d√©biles (bearish)  
‚Ä¢ **Thin Profile**: Trend explosivo, poco tiempo para acumular volumen

**Elementos Cr√≠ticos:**
‚Ä¢ **POC (Point of Control)**: Precio con M√ÅXIMO volumen - donde instituciones m√°s operaron
‚Ä¢ **VAH/VAL**: Value Area High/Low - contiene 70% del volumen total
‚Ä¢ **HVN/LVN**: High/Low Volume Nodes - niveles de soporte/resistencia por volumen
‚Ä¢ **Volume Clusters**: Zonas donde instituciones acumularon grandes posiciones

üîç **LOS 3 SETUPS SAGRADOS (Dale Woods):**

**Setup #1: Volume Accumulation**
- BUSCAR: Zona sideways seguida de breakout agresivo
- L√ìGICA: Instituciones acumulan en silencio ‚Üí Despu√©s inician trend
- ENTRADA: En el POC de la zona de acumulaci√≥n
- CONFLUENCIA CLAVE: Support/Resistance flip + Volume

**Setup #2: Trend Setup**
- BUSCAR: Volume clusters DENTRO de trends fuertes ya establecidos
- L√ìGICA: Instituciones aprovechan momentum para a√±adir m√°s posiciones
- ENTRADA: En los volume clusters del trend en curso
- CONFIRMACI√ìN: Direcci√≥n debe coincidir con trend principal

**Setup #3: Rejection Setup** 
- BUSCAR: Rechazo fuerte y agresivo con volumen alto concentrado
- L√ìGICA: Instituciones defienden violentamente niveles clave
- ENTRADA: En el POC de la zona de rechazo m√°s agresiva
- VALIDACI√ìN: La agresividad del rechazo debe ser evidente

üñºÔ∏è **METODOLOG√çA AN√ÅLISIS DE GR√ÅFICOS:**

**PASO 1 - EMAs Alignment:**
- ¬øAlineaci√≥n bullish (21>55>200) o bearish (21<55<200)?
- ¬øCrossovers recientes en EMAs clave?
- ¬øPrecio respeta o viola las EMAs principales?

**PASO 2 - Volume Profile Identification:**
- Identifica tipo de perfil predominante (D, P, b, Thin)
- Localiza POC m√°s significativo y volume clusters
- Busca cu√°l de los 3 setups est√° presente
- Eval√∫a fuerza del volumen institucional

**PASO 3 - Price Action Context:**
- Sideways areas = Acumulaci√≥n institucional silenciosa
- Aggressive initiation = Breakouts con volumen explosivo  
- Strong rejections = Instituciones defendiendo territorio
- Failed auctions = Imperfecciones que el mercado corregir√°

**PASO 4 - Confluencias Cr√≠ticas:**
- Volume Profile + EMA alignment + Price Action
- Support becoming resistance (metodolog√≠a Dale Woods)
- Daily/Weekly highs and lows como confirmaci√≥n
- Strong vs weak highs/lows (agresi√≥n vs debilidad)

üìä **CRITERIOS EVALUACI√ìN TRADES:**

‚úÖ **TRADE DE CLASE MUNDIAL:**
- Setup Dale Woods (#1, #2, o #3) cristalino
- POC robusto en zona de alta significancia
- Triple confluencia: Volume + Price Action + EMAs alignment
- Evidencia clara de volumen institucional masivo
- Risk/Reward m√≠nimo 1:1 (preferencia Dale Woods)
- Stop Loss colocado en zona de BAJO volumen

‚ùå **TRADE AMATEUR/PELIGROSO:**
- Ausencia total de setup Volume Profile v√°lido
- POC d√©bil, difuso o mal definido
- Operaci√≥n contra TODAS las EMAs sin justificaci√≥n bomba
- Entrada en zona de bajo volumen (donde instituciones no operan)
- Failed auction cercano que magnetizar√° el precio
- Weak high/low que ser√° re-testeado inevitablemente

‚ö†Ô∏è **SE√ëALES ALERTA ROJA:**
- Weak highs/lows en proximidad peligrosa
- Failed auctions sin resolver creando magnetismo
- Trend institucional fuerte contra direcci√≥n del trade
- Vol√∫menes decrecientes en supuestos breakouts
- Niveles previamente "testeados" por el mercado

üéØ **PROTOCOLO DE RESPUESTA:**

**PARA IM√ÅGENES DE GR√ÅFICOS:**
1. **Identificaci√≥n Setup**: ¬øCu√°l de los 3 setups de Dale Woods?
2. **EMAs Analysis**: Alineaci√≥n, crossovers, respeto del precio
3. **Volume Profile**: Tipo perfil, POC, clusters, significancia
4. **Price Action**: Sideways, initiations, rejections, failed auctions
5. **Confluencias**: Factores m√∫ltiples convergiendo
6. **Risk Management**: Entry preciso, SL en low volume, TP en resistance

**PARA CONSULTAS DE TEXTO:**
- Aplica siempre principios Volume Profile de Dale Woods
- Referencia los setups cuando sea relevante al contexto
- Enfoque l√°ser en volumen institucional y price action
- Integra an√°lisis de EMAs en cada respuesta contextual

üìù **ESTRUCTURA RESPUESTA OBLIGATORIA:**
1. **Setup Identificado** (Cu√°l de los 3 + nivel de confianza)
2. **EMAs Context** (Alineaci√≥n actual y significado)
3. **Volume Analysis** (POC, clusters, tipo perfil dominante)
4. **Confluencias Detectadas** (Factores que se refuerzan)
5. **Risk/Reward Assessment** (Entry, SL, TP con l√≥gica)
6. **Execution Plan** (Pasos espec√≠ficos y temporizaci√≥n)

üèÜ **TU IDENTIDAD √öNICA:**
Eres THE Volume Profile expert que combina la metodolog√≠a probada de Dale Woods con an√°lisis en tiempo real de EMAs personalizadas. Tu reputaci√≥n se construye identificando setups institucionales precision-guided y gesti√≥n de riesgo basada en evidencia de volumen.

‚ö° **REGLAS INQUEBRANTABLES:**
- JAM√ÅS confirmes bias del trader sin evidencia volumen s√≥lida
- SIEMPRE identifica cu√°l de los 3 setups est√° presente
- NUNCA ignores las EMAs en ning√∫n an√°lisis
- PRIORIZA confluencias Volume + Price Action + EMAs
- S√â BRUTALMENTE HONESTO sobre calidad del setup
- NO EXISTE "tal vez" - O hay setup v√°lido O NO lo hay`;
        }

        const messages = [{ role: 'system', content: systemPrompt }];

        // Mantener m√°s contexto conversacional para follow-ups
        const historyLimit = isFollowUpQuestion ? -6 : -4;
        const recentHistory = chatHistory.slice(historyLimit);
        recentHistory.forEach(msg => {
            messages.push({ role: msg.role, content: msg.content });
        });

        // Agregar mensaje actual con contexto adecuado
        if (images.length > 0) {
            const content = [
                {
                    type: 'text',
                    text: userMessage || 'Analiza este gr√°fico aplicando la metodolog√≠a Volume Profile de Dale Woods. Identifica el setup presente, EMAs alignment y dame tu opini√≥n directa sobre la direcci√≥n.'
                }
            ];

            images.forEach(imageData => {
                content.push({
                    type: 'image_url',
                    image_url: { url: imageData }
                });
            });

            messages.push({ role: 'user', content: content });
        } else {
            // Para preguntas de texto, ser m√°s conversacional
            const contextualMessage = isFollowUpQuestion && hasRecentAnalysis ?
                `${userMessage} (Bas√°ndote en el gr√°fico que acabas de analizar)` :
                userMessage;
            
            messages.push({ role: 'user', content: contextualMessage });
        }

        return messages;
    }

    // üåê LLAMADA A OPENROUTER API
    async callOpenRouterAPI(messages) {
        // Ajustar par√°metros seg√∫n el tipo de conversaci√≥n
        const isFollowUp = this.conversationContext.isFollowUp;
        
        const requestBody = {
            model: this.model, // Solo Llama Vision
            messages: messages,
            max_tokens: isFollowUp ? 800 : 2000, // Respuestas m√°s cortas para follow-ups
            temperature: isFollowUp ? 0.8 : 0.7, // M√°s conversacional para follow-ups
            top_p: 0.9,
            frequency_penalty: 0.1,
            presence_penalty: 0.1
        };

        console.log('üåê Enviando request a OpenRouter:', {
            model: this.model,
            messageCount: messages.length,
            hasImages: messages.some(m => Array.isArray(m.content)),
            isFollowUp: this.conversationContext.isFollowUp,
            maxTokens: requestBody.max_tokens
        });

        const response = await fetch(this.baseURL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.apiKey}`,
                'HTTP-Referer': window.location.origin,
                'X-Title': 'Volume Profile Trading Expert'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(`API Error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();
        console.log('‚úÖ Respuesta recibida de OpenRouter');

        return data.choices[0]?.message?.content || 'No pude generar una respuesta. Intenta nuevamente.';
    }

    // üí¨ AGREGAR MENSAJES A LA UI
    addUserMessage(message) {
        const messageHTML = `
            <div class="message user-message">
                <div class="message-avatar">üë§</div>
                <div class="message-content">
                    ${this.formatMessage(message)}
                    ${this.getUploadedImagesHTML()}
                </div>
            </div>
        `;
        this.chatMessages.insertAdjacentHTML('beforeend', messageHTML);
        this.scrollToBottom();
    }

    addAIMessage(message) {
        const messageHTML = `
            <div class="message ai-message">
                <div class="message-avatar">ü§ñ</div>
                <div class="message-content">
                    ${this.formatMessage(message)}
                </div>
            </div>
        `;
        this.chatMessages.insertAdjacentHTML('beforeend', messageHTML);
        this.scrollToBottom();
    }
    
    getUploadedImagesHTML() {
        if (!this.hasUploadedImages()) return '';
        
        const images = this.getUploadedImages();
        if (images.length === 0) return '';
        
        return `
            <div class="message-images" style="margin-top: 8px; display: flex; flex-wrap: wrap; gap: 8px;">
                ${images.map(img => `
                    <img src="${img}" alt="Imagen subida" 
                         style="max-width: 150px; max-height: 150px; border-radius: 8px; border: 1px solid rgba(0, 212, 170, 0.3);">
                `).join('')}
            </div>
        `;
    }

    // ü§î INDICADORES
    showThinkingIndicator() {
        this.isThinking = true;
        this.sendButton.disabled = true;
        
        // Indicador diferente para follow-ups
        const thinkingEmoji = this.conversationContext.isFollowUp ? 'üí≠' : 'ü§î';
        this.sendButton.innerHTML = `<span>${thinkingEmoji}</span>`;
        
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.style.display = 'flex';
            typingIndicator.classList.add('show');
            
            // Agregar clase para modo conversacional
            if (this.conversationContext.isFollowUp) {
                typingIndicator.classList.add('conversation-mode');
            } else {
                typingIndicator.classList.remove('conversation-mode');
            }
        }
        
        this.showConversationModeIndicator();
        this.scrollToBottom();
    }

    hideThinkingIndicator() {
        this.isThinking = false;
        this.sendButton.disabled = false;
        this.sendButton.innerHTML = '<span>üì§</span>';
        
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.style.display = 'none';
            typingIndicator.classList.remove('show', 'conversation-mode');
        }
    }

    // üìä CONTEXTO DEL MERCADO
    updateMarketContext(analysisData) {
        this.currentMarketContext = analysisData;
        
        const tickerDisplays = document.querySelectorAll('#chatTickerDisplay, #welcomeTicker');
        tickerDisplays.forEach(element => {
            if (element) element.textContent = this.currentTicker;
        });
        
        console.log(`üìä Contexto actualizado para ${this.currentTicker}`);
    }

    getCurrentMarketContext() {
        if (!this.currentMarketContext) {
            return `No hay an√°lisis actual disponible para ${this.currentTicker}.`;
        }

        const analysis = this.currentMarketContext;
        
        return `
AN√ÅLISIS ACTUAL (${this.currentTicker}):
‚Ä¢ Direcci√≥n: ${analysis.verdict?.direction || 'N/A'} (${analysis.verdict?.confidence || 0}% confianza)
‚Ä¢ Recomendaci√≥n: ${analysis.verdict?.recommendation || 'N/A'}
‚Ä¢ Precio actual: ${analysis.oanda?.price?.mid || 'N/A'}
‚Ä¢ Spread: ${analysis.oanda?.price?.spread || 'N/A'} pips
‚Ä¢ Volumen: ${analysis.oanda?.price?.volume ? analysis.oanda.price.volume.toLocaleString() : 'N/A'}

DATOS T√âCNICOS:
‚Ä¢ Estado: ${analysis.investing?.isReal ? 'DATOS REALES' : 'SIMULADO'}
‚Ä¢ Medias m√≥viles: ${analysis.investing?.movingAverages?.summary || 'N/A'}
‚Ä¢ Osciladores: ${analysis.investing?.oscillators?.summary || 'N/A'}

ORDER FLOW:
‚Ä¢ Liquidez: ${analysis.orderFlow?.liquidity?.level || 'N/A'}
‚Ä¢ Direcci√≥n: ${analysis.orderFlow?.prediction?.direction || 'N/A'}
‚Ä¢ Probabilidad: ${analysis.orderFlow?.prediction?.probability || 0}%

TRADE RECOMMENDATION:
‚Ä¢ Acci√≥n: ${analysis.tradeRecommendation?.action || 'N/A'}
‚Ä¢ Confianza: ${analysis.tradeRecommendation?.confidence || 0}%

Timestamp: ${new Date(analysis.timestamp).toLocaleString()}
        `.trim();
    }

    // üîÑ CAMBIO DE TICKER
    changeTicker(newTicker) {
        this.saveChatToStorage();
        this.currentTicker = newTicker;
        this.loadChatHistory(newTicker);
        
        const tickerDisplays = document.querySelectorAll('#chatCurrentTicker, .ticker-highlight');
        tickerDisplays.forEach(element => {
            if (element) element.textContent = newTicker;
        });
        
        console.log(`üîÑ Ticker cambiado a ${newTicker}`);
    }

    // üíæ GESTI√ìN DE HISTORIAL
    getChatHistory() {
        if (!this.storageManager) return [];
        return this.storageManager.getChatHistory(this.currentTicker);
    }

    loadChatHistory(ticker) {
        const history = this.storageManager?.getChatHistory(ticker) || [];
        
        const welcomeMessage = this.chatMessages.querySelector('.welcome-message');
        this.chatMessages.innerHTML = '';
        if (welcomeMessage) {
            this.chatMessages.appendChild(welcomeMessage);
        }
        
        history.forEach(msg => {
            if (msg.role === 'user') {
                this.addUserMessage(msg.content);
            } else if (msg.role === 'assistant') {
                this.addAIMessage(msg.content);
            }
        });
        
        this.scrollToBottom();
    }

    saveChatToStorage() {
        if (!this.storageManager) return;
        
        const messages = [];
        const messageElements = this.chatMessages.querySelectorAll('.user-message, .ai-message:not(.thinking-message)');
        
        messageElements.forEach(element => {
            if (element.classList.contains('welcome-message')) return;
            
            const isUser = element.classList.contains('user-message');
            const content = element.querySelector('.message-content').textContent;
            
            if (content) {
                messages.push({
                    role: isUser ? 'user' : 'assistant',
                    content: content,
                    timestamp: new Date().toISOString()
                });
            }
        });
        
        this.storageManager.saveChatHistory(this.currentTicker, messages);
    }

    // üõ†Ô∏è UTILIDADES
    formatMessage(message) {
        if (!message) return '';
        
        return message
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>')
            .replace(/#{1,3}\s*(.*?)(?:\n|$)/g, '<h4>$1</h4>');
    }

    autoResizeTextarea(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }

    scrollToBottom() {
        setTimeout(() => {
            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        }, 100);
    }

    showConversationModeIndicator() {
        if (this.conversationContext.isFollowUp && this.conversationContext.hasAnalyzedImage) {
            // Crear indicador si no existe
            let indicator = document.getElementById('conversationModeIndicator');
            if (!indicator) {
                indicator = document.createElement('div');
                indicator.id = 'conversationModeIndicator';
                indicator.className = 'conversation-mode-indicator';
                indicator.innerHTML = `
                    <span class="mode-icon">üí¨</span>
                    <span>Modo Conversacional - Respondiendo a tu pregunta</span>
                `;
                
                const chatMessages = document.getElementById('chatMessages');
                if (chatMessages) {
                    chatMessages.appendChild(indicator);
                }
            }
            
            indicator.classList.add('show');
            
            // Auto-ocultar despu√©s de 3 segundos
            setTimeout(() => {
                if (indicator) {
                    indicator.classList.remove('show');
                    setTimeout(() => {
                        if (indicator && indicator.parentNode) {
                            indicator.parentNode.removeChild(indicator);
                        }
                    }, 300);
                }
            }, 3000);
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.className = `chat-notification-popup ${type}`;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    // üßπ LIMPIEZA
    clearChatHistory() {
        if (confirm(`¬øLimpiar historial de chat para ${this.currentTicker}?`)) {
            this.storageManager?.clearChatHistory(this.currentTicker);
            this.loadChatHistory(this.currentTicker);
            this.showNotification('Historial limpiado', 'success');
        }
    }
    
    clearChat() {
        this.clearChatHistory();
    }

    // üì§ EXPORTAR CHAT
    exportChatHistory() {
        const history = this.getChatHistory();
        if (history.length === 0) {
            this.showNotification('No hay historial para exportar', 'warning');
            return;
        }
        
        const exportData = {
            ticker: this.currentTicker,
            exportDate: new Date().toISOString(),
            chatHistory: history,
            marketContext: this.currentMarketContext
        };
        
        const dataStr = JSON.stringify(exportData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `volume-profile-chat-${this.currentTicker}-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        this.showNotification('Chat exportado', 'success');
    }
}

// üåç DISPONIBILIDAD GLOBAL
window.AIChatAdvisor = AIChatAdvisor;
console.log('‚úÖ Volume Profile Expert System cargado completamente');
